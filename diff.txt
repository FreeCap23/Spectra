diff --git a/README.md b/README.md
index 12c8416..dbae512 100644
--- a/README.md
+++ b/README.md
@@ -1,5 +1,9 @@
 # Spectra
 
+## Rendered image
+This is the most recent image rendered.
+![Image rendered with Spectra](out.png)
+
 ## Building
 To build Spectra, you need CMake and a C++ Compiler, such as g++ or msvc.
 ```bash
diff --git a/src/main.cpp b/src/main.cpp
index 2048f64..a1172d3 100644
--- a/src/main.cpp
+++ b/src/main.cpp
@@ -1,19 +1,31 @@
 #include "Camera.h"
 #include "Ray.h"
+#include "glm/glm.hpp"
+#define STB_IMAGE_WRITE_IMPLEMENTATION
+#include "stb_image_write.h"
 #include <cstdio>
+#include <cstdlib>
 
 #define WIDTH 400
 #define HEIGHT 200
 
 vec3 getColor(Ray& ray) {
-    return vec3(255, 0, 0);
+    // Return sky color if no intersection with any objects is found
+    // This is the formula for the cosine of the two angles, so we have to map
+    // it to the range [0, 1].
+    float angleWithHorizon = glm::dot(ray.direction, vec3(0, 1, 0)) / glm::length(ray.direction);
+    angleWithHorizon = (-angleWithHorizon + 1) / 2.0;
+    return vec3(150, 220, 255) * angleWithHorizon;
 }
 
 // TODO: Add argument for file name
 int main() {
-    // Setup output file
-    FILE* outFile = fopen("out.ppm", "w");
-    fprintf(outFile, "P3\n%d %d\n255\n", WIDTH, HEIGHT);
+    // Allocate memory for the data
+    // 3 means 3 channels of 8 bits each, so 1 byte each
+    // 3 bytes for every pixel in the image
+    // There are WIDTH * HEIGHT pixels in the image
+    uint8_t* data = new uint8_t[3 * WIDTH * HEIGHT];
+    int offset = 0;
 
     // Setup camera
     Camera camera(vec3(0, 0, 0));
@@ -33,12 +45,17 @@ int main() {
             // Get color for this pixel
             vec3 color = getColor(ray);
 
-            // Write the color to the output file
-            fprintf(outFile, "%d %d %d ", (int)color.x, (int)color.y, (int)color.z);
+            // Write the color to the image buffer
+            data[offset++] = static_cast<uint8_t>(color.x);
+            data[offset++] = static_cast<uint8_t>(color.y);
+            data[offset++] = static_cast<uint8_t>(color.z);
         }
-        // Write newline at the end of the row
-        fprintf(outFile, "\n");
     }
 
+    // Write image buffer to file
+    stbi_write_png("out.png", WIDTH, HEIGHT, 3, data, 3 * WIDTH);
+
+    free(data);
+
     return 0;
 }
